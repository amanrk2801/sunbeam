1.What is wrapper class? What is their use?
  Use primitive types as objects   used in collection
  Data-type conversion
  non-static methods: intValue(), byteValue(), longValue(), floatValue(), doubleValue()   
  static methods: parseInt(), parseDouble(), valueOf(), ...
  Helper methods
  Integer.max(), Integer.sum(), ...
  Information of primitive types
e.g. Integer.BYTES = 4 bytes (int size), Integer.MAX_VALUE (max int), ...   Auto-boxing

2.Which are methods of java.lang.Object class? Which are native methods of object class?

3.What is the need of package? Which types are allowed to declare in package?
  Packages makes Java code modular. It does better organization of the code.
  Package is a container that is used to group logically related 
  classes, interfaces, enums, and other packages.   
  Package helps developer:
  To group functionally related types together.
  To avoid naming clashing/collision/conflict/ambiguity in source code.   
  To control the access to types.
  To make easier to lookup classes in Java source code/docs.

4.Why we can not declare multiple public classes in single .java file?
   Rule: public class name must be same as file name.
   Efficient compilation process (Faster linking during import).

5.What is the difference between import and static import?
   import is used to import public types from other packages.
   import java.util.ArrayList; 
   import java.io.*;

   static import is used to import accessible static members of any class
   import static java.lang.Math.*;
   import static java.lang.System.out;

  
6.What is the difference between checked and unchecked exception?
  Java compiler expect that certain exception must be handled by the programmer -- 
  checked exception.   
  catch block
  throws clause
   
  Most of the checked exceptions arise out of the JVM. 
  Hence Java wants programmer to be aware of them and handle them. For example:   
  File IO --> IOException
  Database --> SqlException
  Threads --> InterruptedException
  
  The other exceptions usually arise due to programmers/users mistakes and within the JVM. 
  For example:   
  NullPointerException
  ArithmeticException

7.Which are the advantages and disadvantages of generics?
  Advantages:
  Type-safety
  
  Disadvantages/Limitations:
  Doesn't work with primitive types
  Can't create object/array of generic type
  Can't overload based on generic type difference   Static fields cannot be of generic type param.
  Can't cast or instanceof with generic type.
  Can't throw or catch objects of generic type.

8.Type Erasure: The generic type param info is not maintained at runtime (inside JVM).
  ArrayList<Integer> list1 = new ArrayList<>();
  Internally (inside JVM), it creates ArrayList of "Object"s.
  And compiler ensures that only Integer can be added to it -- 
  Typesafety. ArrayList<String> list2 = new ArrayList<>();

9.What is difference between Comparable and Comparator?

   Comparable
   The current object (this) is Comparable to the other object -- 
   meant to be written in the class to be compared
   java.lang.Comparable 
   Natural ordering
   class Student implements Comparable<Student> {
  // ...
   public int compareTo(Student other) { 
    	int diff = this.roll - other.roll; 
        return diff;
    }
  } 

  Comparator 
  An object compares two other objects.   
  java.util.Comparator
  Custom order
  class StudentComparator implements Comparator<Student> { 
    public int compare(Student s1, Student s2) {
	int diff = s1.marks - s2.marks; return diff;
    }
  }

10.What is difference between ArrayList and Vector
V: Legacy collection 1.0
A: Collection framework 1.2
V: Synchronized -- Thread safe -- Slower -- Suitable in multi-thread applns
A: Non-Synchronized -- Non thread safe -- Faster -- 
   Suitable in single-thread applns 
V: Enumeration (later added support of Iterator)
V: Initial size 10 & capacity grow (double) 
A: Initial size 10 & capacity grow (+half) 
V: Dynamically growing array
A: Dynamically growing array

11.What is serialization and deserialization? What is significance of serialVersionUID?
Serialization: Converting state of object into sequence of bytes. 
It includes state (field values) as well as class info. 
This state can be stored in file or sent over network. For this, class must be Serializable
objectOutputStream.writeObject(obj);

Deserialization: Constructing object back from the state stored as sequence of bytes
obj = objectInputStream.readObject();

serialVersionUID
class Transaction {
static final long serialVersionUID = 2L;
// fields ...
// methods
}

The serialization runtime associates with each serializable class a version number, 
called a serialVersionUID, which is used during deserialization to verify that the 
sender and receiver of a serialized object have loaded classes for that object 
that are compatible with respect to serialization. 
If the receiver has loaded a class for the object that has a different serialVersionUID than that 
of the corresponding sender's class, 
then deserialization will result in an InvalidClassException.


12.Deep copy vs Shallow copy
Shallow copy -- Created by Object.clone() method for Cloneable objects
Only copies current object (not the embedded objects i.e. objects referenced by fields in the object).
class Human implements Cloneable { 
        int age;
        String name; 
        Date birth;
// ...
        @Override // shallow copy Object clone() throws ... {
	Human other = super.clone(); // Object.clone() return other;
        }
}

Copies the whole object including embedded objects. Needs to be done explicitly in overridden clone() method
class Human implements Cloneable { 
int age;
String name; 
Date birth;
// ...
@Override // deep copy
Object clone() throws ... {
	   Human other = super.clone(); // Object.clone() other.birth = this.birth.clone();
	   return other;
        }
}


13.difference between Closeable and finalize().
When GC collects unused object, it will invoke finalize() method.
The finalize() should be overridden in your class to cleanup the resources
class MyDao {
 Connection con;
 public void finalize() { 
  con.close();
   }
}

However, you cannot force/gurantee the GC. Possibly if GC is delayed, your resource remains open for longer duration. Poor performance. 
Closeable implementation ensure that resource can be closed immediatly after its use.
class MyDao implements Closeable { 
Connection con;
// ...
public void close() { con.close();
}
}

MyDao dao = new MyDao();
// ...
dao.close(); // resource closed immediatly


14.What is functional interface? Which functional interfaces are predefined and where they are used?
Functional interface: SAM (Single Abstract Method)  
  Any number of default methods
  Any number of static methods

  @FunctionalInterface -- compiler check for SAM - if 0 or multiple SAM, then compiler error.   

  Functional Interface:
  Comparable, Comparator, Runnable, Closeable, ...   

  (In Java 8) Functional Interfaces -- 
  java.util.functional.*

  Predicate ... boolean test(T val);   
  used in filter() operation
  
  Function ... R apply(T val);
  used in map() operation   
  
  Consumer ... void accept(T val);
  used in forEach() operation   
  
  Supplier ... T get();
  used in generator

  Functional Interfaces are also used for method references.
  Consumer<String> cons = System.out::println;
  cons.accept("Sunbeam"); // --> System.out.println("Sunbeam");


15. What is significance of filter(), map(), flatMap() and reduce() operations? In which scenarios they are used?

  *java.util.Stream -- represents stream of data elements
      No storage: Stream doesn't hold data like collections. 
      It processes data from collections/arrays.   
      Immutable: stream1 --> Intermediate operation --> stream2
      Lazily evalutated: stream1.iop1().iop2().iop3().iop4().iop5().terminal();   
      Not reusable: Can perform only one terminal operation on stream.

  Stream operations
  Intermediate operations e.g. map(), filter(), sort(), ...
  Terminal operations e.g. forEach(), collect(), reduce(), ...

 	Integer[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9}; 
	Stream<Integer> stream = Stream.of(array);
	//stream -> 	// 1, 2, 3, 4, 5, 6, 7, 8, 9
       .filter(i -> i % 2 != 0)
			// 1, 3, 5, 7, 9
      .map(i -> "DAC"+i)
			// DAC1, DAC3, DAC5, DAC7, DAC9
      .forEach(s -> System.out.println(s));

https://winterbe.com/posts/2014/03/16/java-8-tutorial/
https://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/	

 













		

